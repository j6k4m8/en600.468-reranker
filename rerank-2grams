#!/usr/bin/env python
import optparse
import sys


NON_ASCII_PENALTY = 20
WORD_COUNT_WEIGHT = 1.24

grams = { }
gram_count = 0

class Modes:

    @staticmethod
    def DEFAULT(hyp, feats, weights):
        """
        The usual: Sum features.
        """
        score = 0.0
        for feat in feats.split(' '):
            (k, v) = feat.split('=')
            score += weights[k] * float(v)
        return score

    @staticmethod
    def CHECK_ASCII(hyp, feats, weights):
        # score = Modes.DEFAULT(hyp, feats, weights)
        score = 0

        for w in hyp.split(' '):
            try:
                w.decode('ascii')
            except:
                score -= NON_ASCII_PENALTY
        return score

    @staticmethod
    def WORD_COUNT(hyp, feats, weights, word_count_weight=WORD_COUNT_WEIGHT):
        return len(hyp.split(' ')) * word_count_weight

    @staticmethod
    def TWOGRAM(hyp, feats, weights, gram_weight):
        score = 0
        hypw = hyp.split(' ')
        for i in range(0, len(hypw) - 1):
            score += grams[(hypw[i], hypw[i+1])]
        return float(score) * gram_weight / gram_count


def score_hypothesis(hyp, feats, weights, fns=[(Modes.DEFAULT, {})]):
    """
    Given a hypothesis and its features, return a score.
    """
    return sum(fn[0](hyp, feats, weights, **fn[1]) for fn in fns)


optparser = optparse.OptionParser()
optparser.add_option("-k", "--kbest-list",
                     dest="input",
                     default="data/dev+test.100best",
                     help="100-best translation lists")
optparser.add_option("-l", "--lm",
                     dest="lm",
                     default=-1.0, type="float",
                     help="Language model weight")
optparser.add_option("-t", "--tm1",
                     dest="tm1",
                     default=-0.5, type="float",
                     help="Translation model p(e|f) weight")
optparser.add_option("-s", "--tm2",
                     dest="tm2",
                     default=-0.5, type="float",
                     help="Lexical translation model p_lex(f|e) weight")

(opts, _) = optparser.parse_args()

weights = {
    'p(e)': float(opts.lm),
    'p(e|f)': float(opts.tm1),
    'p_lex(f|e)': float(opts.tm2)
}

all_hyps = [pair.split(' ||| ') for pair in open(opts.input)]

num_sents = len(all_hyps) / 100

for s in xrange(0, num_sents):
    hyps_for_one_sent = all_hyps[s * 100:s * 100 + 100]
    for (num, hyp, feats) in hyps_for_one_sent:
        hypw = hyp.split(' ')
        for i in range(0, len(hypw) - 1):
            if (hypw[i], hypw[i+1]) not in grams:
                grams[(hypw[i], hypw[i+1])] = 0
            grams[(hypw[i], hypw[i+1])] += 1
            gram_count += 1

# print "Grams done."

for s in xrange(0, num_sents):
    hyps_for_one_sent = all_hyps[s * 100:s * 100 + 100]
    (best_score, best) = (-1e300, '')

    for (num, hyp, feats) in hyps_for_one_sent:

        score = score_hypothesis(hyp, feats, weights, fns=[
            (Modes.DEFAULT, {}),
            (Modes.CHECK_ASCII, {}),
            (Modes.WORD_COUNT, {'word_count_weight': 1.232}),
            (Modes.TWOGRAM, {'gram_weight': 5}),
        ])

        if score > best_score:
            (best_score, best) = (score, hyp)
    try:
        sys.stdout.write("%s\n" % best)
    except (Exception):
        sys.exit(1)
